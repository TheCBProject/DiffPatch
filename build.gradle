plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "net.covers1624.centralpublisher" version "1.0.4"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
        vendor = JvmVendorSpec.ADOPTIUM
    }
    withSourcesJar()
    withJavadocJar()
}

group 'io.codechicken'
archivesBaseName = 'DiffPatch'
version '2.0.0'

version = "$version." + (System.getenv("BUILD_NUMBER") ?: "1")
println "Starting build of ${archivesBaseName}, Version: ${version}"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api 'net.covers1624:Quack:0.4.10.101'
    api 'it.unimi.dsi:fastutil:8.3.1'
    api 'org.apache.commons:commons-lang3:3.9'
    api 'org.apache.commons:commons-compress:1.18'
    api 'org.tukaani:xz:1.8'
    api 'net.sf.jopt-simple:jopt-simple:5.0.4'

    compileOnly 'org.jetbrains:annotations:23.1.0'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly gradleApi()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

test {
    useJUnitPlatform()
}

def commonManifest = {
    attributes 'Main-Class': 'codechicken.diffpatch.DiffPatch'
}

jar {
    manifest commonManifest
    from file("LICENSE.txt")

    finalizedBy 'signJar'
}

shadowJar {
    minimize()
    manifest commonManifest
    configurations = [project.configurations.runtimeClasspath]

    finalizedBy 'signShadowJar'

    // Include license, exclude java9 and maven things.
    from file("LICENSE.txt")
    exclude 'META-INF/maven/**'
    exclude 'module-info.class'

    // Relocate all our dependencies into a repack package.
    relocate 'net.covers1624.quack', 'io.codechicken.repack.net.covers1624.quack'
    relocate 'it.unimi', 'io.codechicken.repack.it.unimi'
    relocate 'org.apache', 'io.codechicken.repack.org.apache'
    relocate 'org.tukaani', 'io.codechicken.repack.org.tukaani'
    relocate 'joptsimple', 'io.codechicken.repack.joptsimple'
    // Transform joptsimple properties files.
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer) {
        paths << "joptsimple/ExceptionMessages.properties"
        paths << "joptsimple/HelpFormatterMessages.properties"
        keyTransformer = { key ->
            key.replaceAll('^(joptsimple\\..*)$', 'io.codechicken.repack.$1')
        }
    }
}

['jar', 'shadowJar'].each {t ->
    tasks.register("sign${t.capitalize()}") {
        dependsOn(t)

        doFirst {
            def args = [:]
            args['jar'] = tasks.named(t).get().archiveFile.get().asFile
            if (System.getenv("KEY_STORE")) {
                args['keyStore'] = System.getenv("KEY_STORE")
                file(System.getenv("KEY_STORE_PROPS")).withReader {
                    def props = new Properties()
                    props.load(it)
                    args.putAll(props)
                }
            } else if (project.hasProperty('keyStore')) {
                args['keyStore'] = project.getProperty('keyStore')
                args['alias'] = project.getProperty('keyStoreAlias')
                args['storePass'] = project.getProperty('keyStorePass')
                args['keyPass'] = project.getProperty('keyStoreKeyPass')
            } else {
                println "No signing properties."
                state.setOutcome(org.gradle.api.internal.tasks.TaskExecutionOutcome.UP_TO_DATE)
                didWork = false
                return
            }
            project.ant.invokeMethod('signjar', args)
        }
    }
}

javadoc {
    options.addBooleanOption("Xdoclint:none", true)
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://nexus.covers1624.net/repository/maven-releases/"
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        DiffPatch(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components['java']

            pom {
                name = archivesBaseName
                description = archivesBaseName
                url = "https://github.com/TheCBProject/DiffPatch"
                scm {
                    url = "https://github.com/TheCBProject/DiffPatch"
                    connection = "scm:git:git://github.com/TheCBProject/DiffPatch.git"
                    connection = "scm:git:git@github.com:TheCBProject/DiffPatch.git"
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/TheCBProject/DiffPatch/issues"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://raw.githubusercontent.com/TheCBProject/DiffPatch/master/LICENSE.txt"
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'covers1624'
                        name = 'covers1624'
                    }
                }
                developers {
                    developer {
                        id = 'ChickenBones'
                        name = 'Chicken Bones'
                    }
                }
            }
        }
    }
}

signing {
    if (System.getenv('GPG_PRIVATE_KEY')) {
        useInMemoryPgpKeys(
                new File(System.getenv('GPG_PRIVATE_KEY')).text,
                System.getenv('GPG_PRIVATE_KEY_PASS')
        )
    } else if (project.hasProperty('gpgPrivateKey')) {
        useInMemoryPgpKeys(
                new File(project.getProperty('gpgPrivateKey')).text,
                project.getProperty('gpgPrivateKeyPass')
        )
    } else {
        return
    }
    sign publishing.publications.DiffPatch
}

centralPublishing {
    if (System.getenv("SONATYPE_USERNAME")) {
        credentials {
            username = System.getenv("SONATYPE_USERNAME")
            password = System.getenv("SONATYPE_PASSWORD")
        }
        publishingType = "AUTOMATIC"
        forPublication publishing.publications.DiffPatch
    }
}
